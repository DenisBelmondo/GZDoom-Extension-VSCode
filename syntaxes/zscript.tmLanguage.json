{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "ZScript",
    "patterns": [
        {
            "include": "#comments"
        },
        {
            "include": "#blocks"
        },
        {
            "include": "#strings"
        },
        {
            "include": "#punctuation"
        },
        {
            "include": "#types"
        },
        {
            "include": "#keywords"
        },
        {
            "include": "#directives"
        },
        {
            "include": "#functions"
        },
        {
            "include": "#variable"
        },
        {
            "include": "#states"
        }
    ],
    "repository": {
        "comments": {
            "patterns": [
                {
                    "name": "comment.line.double-slash.zscript",
                    "begin": "\\/\\/",
                    "end": "$",
                    "contentName": "comment.line.double-slash.text.zscript"
                },
                {
                    "name": "comment.block.zscript",
                    "begin": "\\/\\*",
                    "end": "\\*\\/",
                    "contentName": "comment.block.text.zscript"
                }
            ]
        },
        "keywords": {
            "patterns": [
                {
                    "name": "keyword.control.zscript",
                    "match": "\\b(?i:if|else|for|return|do|while|switch|continue|break|case)\\b"
                },
                {
                    "name": "keyword.operator.zscript",
                    "match": "(?:-[-=]?|!=?|\\+[+=]?|~(?:==)?|\\*[*=]?|\\/=?|%=?|<(?:<|>?=)?|>(?:>(?:>|=)?|=)?|\\.\\.?|==?|&[&=]?|\\|[|=]?|\\^=?|::?)|\\b(?:alignof|sizeof|cross|dot|is)\\b",
                    "comment": "Who the hell made Regex? I just wanted to help GZDoom modders, not become the regex king... actually, not just a regex king... a REGEX GOD!"
                },
                {
                    "name": "keyword.other.zscript",
                    "match": "\\b(?i:action|clearscope|deprecated|final|native|override|play|private|protected|static|ui|vararg|virtual|virtualscope|abstract|replaces|readonly|extend|in|out)\\b"
                },
                {
                    "name": "storage.type.zscript",
                    "match": "\\b(?i:let|const)\\b"
                }
            ]
        },
        "strings": {
            "patterns": [
                {
                    "name": "string.quoted.double.zscript",
                    "begin": "\"",
                    "end": "\""
                },
                {
                    "name": "string.quoted.single.zscript",
                    "begin": "'",
                    "end": "'"
                }
            ]
        },
        "punctuation": {
            "patterns": [
                {
                    "name": "punctuation.terminator.statement.zscript",
                    "match": ";"
                },
                {
                    "name": "punctuation.brackets.round.zscript",
                    "match": "[()]"
                },
                {
                    "name": "punctuation.brackets.square.zscript",
                    "match": "[\\[\\]]"
                },
                {
                    "name": "punctuation.brackets.curly.zscript",
                    "match": "[{}]"
                },
                {
                    "name": "constant.numeric.decimal.point.zscript",
                    "match": "(?<=[\\d]?)\\.(?=[\\d])"
                }
            ]
        },
        "types": {
            "patterns": [
                {
                    "name": "constant.numeric.zscript",
                    "match": "\\b\\d+?\\b"
                },
                {
                    "name": "storage.type.zscript",
                    "match": "\\b(?i:int|uint|int8|uint8|int16|uint16|byte|sbyte|short|ushort|float|float32|float64|double|string|name|color|vector2|vector3|array|map|actor|bool|sound|spriteid|state|statelabel|textureid|void|voidptr|meta|internal|latent|transient|class|struct|enum|self|null|property)\\b"
                }
            ]
        },
        "directives": {
            "patterns": [
                {
                    "name": "keyword.control.import.zscript",
                    "match": "(?<=^#)import\\b"
                },
                {
                    "name": "keyword.control.directive.zscript",
                    "match": "\\b(?i:version|default|states)\\b"
                }
            ]
        },
        "functions": {
            "name": "entity.name.function.zscript",
            "match": "\\w+?(?=\\s*?\\()"
        },
        "statesstuff": {
            "patterns": [
                {
                    "name": "keyword.operator",
                    "match": "\\b(?i:spawn|idle|see|melee|missile|pain|death|death.sky|death.extreme|xdeath|death.fire|burn|death.ice|ice|death.disintegrate|disintegrate|raise|heal|crash|crash.extreme|crush|wound|greetings|yes|no|active|inactive|bounce)\\b"
                }
            ]
        },
        "blocks": {
            "patterns": [
                {
                    "name": "entity.name.class.zscript",
                    "match": "(?i)(?<=class\\s+)\\w+|(?<=(?<=class\\s+)\\w+\\s+\\:\\s+)\\w+|(?<=class[<]\\s*)\\w+(?=\\s*[>])"
                },
                {
                    "name": "entity.name.class.property.zscript",
                    "match": "(?i)(?<=property\\s+?)\\w+?\\b"
                },
                {
                    "name": "entity.name.class.enum.zscript",
                    "match": "(?i)(?<=enum\\s+)\\w+"
                },
                {
                    "name": "entity.name.class.enum.zscript",
                    "match": "(?i)(?<=struct\\s+)\\w+"
                },
                {
                    "name": "entity.name.class.dynamic.array.zscript",
                    "begin": "(?<=(?i)array[<])",
                    "end": "(?=(?<![^<]\\W+)[>])",
                    "patterns": [
                        {
                            "name": "storage.type.zscript",
                            "match": "(?i)\\bclass\\b"
                        },
                        {
                            "name": "keyword.operator.zscript",
                            "match": "[<>]"
                        }
                    ]
                }
            ]
        },
        "variable": {
            "patterns": [
                {
                    "name": "variable.parameter.zscript",
                    "match": "(?<=\\w+[.])\\w+"
                },
                {
                    "name": "variable.other.zscript",
                    "match": "\\b\\w+\\b"
                }
            ]
        },
        "states": {
            "patterns": [
                {
                    "name": "entity.other.decorate.block.zscript",
                    "begin": "(?i)(?<=default\\s*)",
                    "end": "}",
                    "patterns": [
                        {
                            "include": "#comments"
                        },
                        {
                            "include": "#types"
                        },
                        {
                            "include": "#strings"
                        },
                        {
                            "include": "#punctuation"
                        },
                        {
                            "include": "#keywords"
                        },
                        {
                            "name": "entity.name.class.attribute.zscript",
                            "match": "(?<=\\+|\\-)\\w+|(?<=(?<=\\+|\\-)\\w+\\.?)\\w+"
                        },
                        {
                            "name": "variable.name.zscript",
                            "match": "\\b\\w+\\b"
                        }
                    ]
                },
                {
                    "name": "entity.other.states.block.zscript",
                    "begin": "(?i)(?<=states\\s*)",
                    "end": "^\\s}",
                    "patterns": [
                        {
                            "include": "#comments"
                        },
                        {
                            "include": "#punctuation"
                        },
                        {
                            "include": "#strings"
                        },
                        {
                            "include": "#keywords"
                        },
                        {
                            "include": "#types"
                        },
                        {
                            "include": "#functions"
                        },
                        {
                            "name": "entity.name.class.state.zscript",
                            "match": "\\b\\w+(?=:$)"
                        },
                        {
                            "name": "entity.name.class.state.zscript",
                            "match": "(?i)(?<=goto)\\s+\\w+(?=\\;)"
                        },
                        {
                            "name": "keyword.states.zscript",
                            "match": "(?i)\\b(?:bright|canraise|fast|light|nodelay|offset|slow)\\b"
                        },
                        {
                            "name": "keyword.control.states.zscript",
                            "match": "(?i)\\b(?:loop|stop|wait|fail|goto)\\b"
                        },
                        {
                            "name": "entity.name.function.zscript",
                            "match": "A_\\w+"
                        },
                        {
                            "name": "variable.other.zscript",
                            "match": "\\b\\w+\\b"
                        }
                    ]
                }
            ]
        }
    },
    "scopeName": "source.zscript"
}
